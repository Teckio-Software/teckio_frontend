name: Deployment Frontend Development

on:
  push:
    branches: [develop]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    # Cambia BUILD_CONTEXT si tu Dockerfile está en otra ruta (usa "." si está en la raíz)
    env:
      BUILD_CONTEXT: frontend/teckio_frontend

    steps:
      - name: Checkout (git clone con GITHUB_TOKEN)
        run: |
          git clone --depth=1 https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git repo
          cd repo
          echo "GIT SHA: $(git rev-parse --short HEAD)"

      - name: Asegurar docker context por defecto
        run: docker context use default

      - name: Definir IMAGE (owner en minúsculas)
        id: img
        run: |
          OWNER="${{ github.repository_owner }}"
          OWNER_LC=$(echo "$OWNER" | tr '[:upper:]' '[:lower:]')
          IMAGE="ghcr.io/${OWNER_LC}/teckio_frontend"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "Usando imagen: $IMAGE"

      - name: Login a GHCR (con GITHUB_TOKEN)
        working-directory: repo
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build & Push
        working-directory: repo
        env:
          TAG_DEV: dev
          TAG_SHA: sha-${{ github.sha }}
        run: |
          docker build -t "$IMAGE:$TAG_DEV" -t "$IMAGE:$TAG_SHA" "$BUILD_CONTEXT"
          docker push "$IMAGE:$TAG_DEV"
          docker push "$IMAGE:$TAG_SHA"

      - name: Deploy al droplet por SSH
        working-directory: repo
        run: |
          echo "${{ secrets.DO_SSH_KEY }}" > key.pem
          chmod 600 key.pem
          ssh -o StrictHostKeyChecking=no -i key.pem "${{ secrets.DROPLET_USER }}"@"${{ secrets.DROPLET_HOST }}" \
            'export GHCR_USER="${{ secrets.GHCR_USER }}"; export GHCR_TOKEN="${{ secrets.GHCR_TOKEN }}"; bash /srv/teckio/deploy-dev.sh'
